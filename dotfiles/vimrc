" use vim-defaults instead of vi-defaults (easier, more user friendly
set nocompatible

" set a directory for swap files:
set dir=~/.tmp

" macos workaround
set backspace=indent,eol,start

" for vimgrep to ignore
set wildignore+=target/**,obj/**,*.tmp,*.out,*.o,*.elf,*.d

" do not insert first option in complete menu
set completeopt=noinsert,menu,preview

" case-sensitive if search contains an uppercase character
set smartcase
syntax on
filetype plugin indent on
set smartindent

set ruler

" automatically save before commands like :next and :make
set autowrite

" folds all function
" zM - closes all open folds
" za - toggle a fold at the cursor
" zR - decreases the foldlevel to zero - all folds will be open
" zf#j creates a fold from the cursor down # lines.
"
"set foldmethod=syntax
"set foldmethod=indent

set expandtab shiftwidth=4 softtabstop=4

"autocmd FileType *	setlocal noexpandtab tabstop=4 shiftwidth=4
"autocmd FileType c	setlocal noexpandtab shiftwidth=4 tabstop=4 cindent softtabstop=4
"autocmd FileType S	setlocal shiftwidth=8 tabstop=8 cindent softtabstop=8
"autocmd FileType h	setlocal noexpandtab shiftwidth=8 tabstop=8 cindent softtabstop=8
"autocmd FileType python	setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType make	setlocal noexpandtab

set fileencodings=utf8,cp1251

" open the tab or create a new one when opening files for quickfix
set switchbuf=usetab,newtab

" intelligent comments
"set comments=sl:/*,mb:\ *,elx:\ */
set formatoptions+=r,c,o

" Put red vertical line for *.[chS] files
autocmd BufRead *.[c|h|S] set colorcolumn=80

" highlight exceeded lines
":au BufWinEnter * let w:m2=matchadd('Search', '\%>80v.\+', -1)

" set clipboard=unnamed

" remember copy registers after quitting in the
" .viminfo file -- 20 jump links, regs up to 500 lines'
set viminfo='20,\"500

" Use <NUMBER>j or <NUMBER>k to easily navige needed line:
"set relativenumber
set number

" remember undo after quitting
set hidden

" How many lines of command history:
set history=100

" Minimized window size
set wmh=0

" Awesome file autocomplition rather than default
set wildmode=longest:full
set wildmenu

" Incremental search - start search before hitting <Enter>
set incsearch

" Highlight all search matches
set hlsearch

" Keep two lines of context visible around current line
set scrolloff=2

" Highlight current line
set cursorline
"set cursorcolumn
"hi cursorline guibg=#333333	" highlight bg color of current line
"i CursorColumn guibg=#333333   " highlight cursor

set listchars=tab:>.,trail:.,extends:#,nbsp:.

" show as much as possible of the last line in the window (rather than a
" column of "@", which is the default behavior).
set display+=lastline

:highlight Search ctermfg=16 ctermbg=154 cterm=bold

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"				Cscope options
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use cscope for Ctrl+]
set cscopetag

if has("cscope")
"    set csprg=~/bin/cscope
" First search in cscope then in tags
    set csto=0
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
endif

set tags=./tags;/

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" custom hot keys

" copy & paste between open vim instances
vnoremap ,Y :w! /tmp/vitmp<CR>
nnoremap ,p :r! cat /tmp/vitmp<CR>

" save the file if it was modified
nnoremap ZF :update<CR>
" save file and run make
nnoremap ZC :update<CR>:make<CR>
nnoremap ZR :update<CR>:make run<CR><CR><CR>

" highligh all lines more than 80 characters
noremap ,l :let w:m2=matchadd('Search', '\%>80v.\+', -1) <CR>

" show blanks on ends of lines
nnoremap ,s    :ShowSpaces 1<CR>

" replace blanks on ends of lines
nnoremap ,st   m`:TrimSpaces<CR>``
vnoremap ,st   :TrimSpaces<CR>

" find current word in all files in current directory:
map ,F :execute "noautocmd vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>

" show current function name
map ,f :call ShowFuncName() <CR>

" Easier moving in tabs and windows
map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_
map <C-L> <C-W>l<C-W>_
map <C-H> <C-W>h<C-W>_

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Disable visual binding
nnoremap Q <nop>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" plugins options

" pathogen plugin manager (only needed on VIM older than 8.0)
" execute pathogen#infect()

" don't auto-detect shiftwidth, tabstop
" let g:sleuth_automatic = 0

let g:airline_theme='bubblegum'

" Plugin ctrlp
" When opening a file, if it's already open in a window somewhere, CtrlP will try
"to jump to it instead of opening a new instance: >
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_by_filename = 1
" first search in mru (most recently used)
let g:ctrlp_types = ['mru', 'fil', 'buf']

" vim-sneak plugin
let g:sneak#label = 1

" disable overwriting tmux theme
let g:airline#extensions#tmuxline#enabled = 0

" netrw - file browsing builtin plugin
let g:netrw_preview=1
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view

" for plugin 'mark'
let g:mwDefaultHighlightingPalette = 'extended'

" use powerline enabled font (I use hack-fonts)
let g:airline_powerline_fonts = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" subroutines

" Show current function name in the toolbar
fun! ShowFuncName()
  let lnum = line(".")
  let col = col(".")
  echohl ModeMsg
  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
  echohl None
  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun

" Shows blanks at the end of lines
function ShowSpaces(...)
  let @/='\v(\s+$)|( +\ze\t)'
  let oldhlsearch=&hlsearch
  if !a:0
    let &hlsearch=!&hlsearch
  else
    let &hlsearch=a:1
  end
  return oldhlsearch
endfunction

function TrimSpaces() range
  let oldhlsearch=ShowSpaces(1)
  execute a:firstline.",".a:lastline."substitute ///gec"
  let &hlsearch=oldhlsearch
endfunction

command -bar -nargs=? ShowSpaces call ShowSpaces(<args>)
command -bar -nargs=0 -range=% TrimSpaces <line1>,<line2>call TrimSpaces()
